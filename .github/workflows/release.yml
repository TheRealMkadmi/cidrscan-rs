# .github/workflows/build-and-release.yml
name: Build and Release Libraries

on:
  push:
    tags: ['v*']
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
###############################################################################
# 0. Test suite
###############################################################################
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
      - name: Build cidrscan_core staticlib + cdylib
        run: |
          cargo build --workspace --all-targets
      - run: |
          cargo test --workspace --all-targets
          cargo test --workspace --features enable_global_priv

###############################################################################
# 1. Generate the IDE stubs once (Linux) and expose them as an artifact
###############################################################################
  generate-stubs:
    needs: test
    runs-on: ubuntu-latest   
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo install cargo-php --locked
      - name: Build stubs
        run: cargo php stubs --manifest cidrscan_php/Cargo.toml -o cidrscan_php.phpstub
      - name: Upload stub artifact
        uses: actions/upload-artifact@v4
        with:
          name: php-stubs
          path: cidrscan_php.phpstub

###############################################################################
# 2. Native C-ABI libraries (Linux, Windows, macOS)
###############################################################################
  build-libs:
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      # cross binary cached – Linux only
      - if: runner.os == 'Linux'
        uses: actions/cache@v4
        id: cache-cross
        with:
          path: ~/.cargo/bin/cross
          key: cross-bin
      - if: runner.os == 'Linux' && steps.cache-cross.outputs.cache-hit != 'true'
        run: cargo install cross --git https://github.com/cross-rs/cross --locked
      - uses: Swatinem/rust-cache@v2

      # Install Info-ZIP so that the bash loop can call `zip`
      - name: Install zip CLI (Windows)
        if: runner.os == 'Windows'
        run: choco install -y zip

      - name: Add required Rust targets
        run: |
          rustup target add x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu x86_64-pc-windows-msvc x86_64-apple-darwin aarch64-apple-darwin

      - name: Build & package targets for this OS
        shell: bash
        run: |
          set -euo pipefail
          case "$RUNNER_OS" in
            Linux)
              TARGETS=("x86_64-unknown-linux-gnu" "aarch64-unknown-linux-gnu")
              ;;
            Windows)
              TARGETS=("x86_64-pc-windows-msvc")
              ;;
            macOS)
              TARGETS=("x86_64-apple-darwin" "aarch64-apple-darwin")
              ;;
          esac
          mkdir -p packages
          for TARGET in "${TARGETS[@]}"; do
            case "$TARGET" in
              x86_64-unknown-linux-gnu)  NAME=linux-x86_64 ;;
              aarch64-unknown-linux-gnu) NAME=linux-aarch64 ;;
              x86_64-pc-windows-msvc)    NAME=windows-x86_64 ;;
              x86_64-apple-darwin|aarch64-apple-darwin) NAME=macos-${TARGET%%-*} ;;
            esac

            # build ─────────────
            if [ "$RUNNER_OS" = "Linux" ]; then
              cross build --release --manifest-path cidrscan_core/Cargo.toml --target "$TARGET"
            else
              cargo build --release --manifest-path cidrscan_core/Cargo.toml --target "$TARGET"
            fi

            SRC=target/$TARGET/release
            INC=cidrscan_core/include

            mkdir -p "packages/$NAME"
            cp "$INC/cidrscan.h" "packages/$NAME/"
            # Copy shared + static libraries
            # Copy shared + static libraries (unquoted → glob expands)
            for PAT in libcidrscan*.so libcidrscan*.a cidrscan*.dll \
                       cidrscan*.lib  libcidrscan*.dylib; do
              cp $SRC/$PAT packages/$NAME/ 2>/dev/null || true
            done

            (cd "packages/$NAME" && zip -rq "../../$NAME.zip" .)
            echo "::group::Contents of $NAME.zip"
            unzip -l "$NAME.zip"
            echo "::endgroup::"
          done

          # macOS only – fuse into one universal dylib
          if [ "$RUNNER_OS" = "macOS" ]; then
            mkdir -p packages/macos-universal
            lipo -create \
              target/x86_64-apple-darwin/release/libcidrscan_core.dylib \
              target/aarch64-apple-darwin/release/libcidrscan_core.dylib \
              -output packages/macos-universal/libcidrscan_core.dylib
            cp cidrscan_core/include/cidrscan.h packages/macos-universal/
            (cd packages/macos-universal && zip -rq "../../macos-universal.zip" .)
            echo "::group::Contents of macos-universal.zip"
            unzip -l macos-universal.zip
            echo "::endgroup::"
          fi 

      - uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: |
            linux-*.zip
            windows-*.zip
            macos-*.zip
            macos-universal.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload individual native library zips
        if: success()          # run on every OS job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.job }}-${{ matrix.os }}
          path: |
            linux-*.zip
            windows-*.zip
            macos-*.zip
            macos-universal.zip
          if-no-files-found: error

###############################################################################
# 3. PHP extensions (+ stubs) for PHP 8.3 & 8.4 across OS/arch/TS combos
###############################################################################
  build-php:
    needs: generate-stubs
    strategy:
      matrix:
        include:
          # Linux NTS (x86_64 + aarch64)
          - { os: ubuntu-latest, osname: linux, arch: x86_64, target: x86_64-unknown-linux-gnu, libext: so, phpts: nts, version: '8.3' }
          - { os: ubuntu-latest, osname: linux, arch: aarch64, target: aarch64-unknown-linux-gnu, libext: so, phpts: nts, version: '8.3' }
          - { os: ubuntu-latest, osname: linux, arch: x86_64, target: x86_64-unknown-linux-gnu, libext: so, phpts: nts, version: '8.4' }
          - { os: ubuntu-latest, osname: linux, arch: aarch64, target: aarch64-unknown-linux-gnu, libext: so, phpts: nts, version: '8.4' }

          # macOS NTS – build both archs in one job and output a universal binary
          - { os: macos-latest, osname: macos, arch: universal, target: x86_64-apple-darwin, libext: so, phpts: nts, version: '8.3' }
          - { os: macos-latest, osname: macos, arch: universal, target: x86_64-apple-darwin, libext: so, phpts: nts, version: '8.4' }

          # Windows NTS & TS (x86_64 only)
          - { os: windows-latest, osname: windows, arch: x86_64, target: x86_64-pc-windows-msvc, libext: dll, phpts: nts, version: '8.3' }
          - { os: windows-latest, osname: windows, arch: x86_64, target: x86_64-pc-windows-msvc, libext: dll, phpts: ts,  version: '8.3' }
          - { os: windows-latest, osname: windows, arch: x86_64, target: x86_64-pc-windows-msvc, libext: dll, phpts: nts, version: '8.4' }
          - { os: windows-latest, osname: windows, arch: x86_64, target: x86_64-pc-windows-msvc, libext: dll, phpts: ts,  version: '8.4' }
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install aarch64 cross-compiler
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install macOS cross-compilers
        if: runner.os == 'macOS'
        run: brew install llvm

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.version }}
        env:
          phpts: ${{ matrix.phpts }}

      - if: runner.os == 'Windows'
        id: php_sdk
        uses: php/setup-php-sdk@v0.10
        with:
          version: ${{ matrix.version }}
          arch: x64
          ts: ${{ matrix.phpts }}

      - if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          toolset: ${{ steps.php_sdk.outputs.toolset }}

      # ─────────── Rust (nightly on Windows, stable elsewhere) ────────────
      - if: runner.os == 'Windows'
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
          targets: ${{ matrix.target }}
      - if: runner.os != 'Windows'
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ runner.os }}-${{ matrix.target || '' }}

      # cargo-php is only needed where we *create* the stubs
      - if: runner.os == 'Linux'
        run: cargo install cargo-php --locked

      # Bring the pre-built stub onto every runner
      - name: Download stub artifact
        uses: actions/download-artifact@v4
        with:
          name: php-stubs

      # ----- Make php.exe visible for Git-Bash & the Rust build script (Windows only) ---
      - name: Put PHP on PATH for bash (Windows)
        if: runner.os == 'Windows'
        shell: pwsh            # use PowerShell so Get-Command works
        run: |
          # Absolute path to the php.exe that setup-php just installed
          $phpExe = (Get-Command php).Source
          Write-Host "php.exe found at $phpExe"

          # 1. Tell ext-php-rs explicitly where PHP is
          echo "PHP=$phpExe" >> $Env:GITHUB_ENV

          # 2. Add the directory to PATH for *all* later steps (bash included)
          echo "$(Split-Path $phpExe)" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

      - name: Add rustfmt component
        run: rustup component add rustfmt --toolchain nightly
        if: runner.os == 'Windows'

      - name: Build extension / create universal binary / copy stubs
        shell: bash
        run: |
          set -euo pipefail
          OUTDIR="packages/php-${{ matrix.version }}_${{ matrix.osname }}_${{ matrix.arch }}_${{ matrix.phpts }}"
          mkdir -p "$OUTDIR"

          # ---------- build primary arch ----------
          cargo build --workspace --release --target="${{ matrix.target }}"  

          # ---------- macOS universal: build second arch + lipo merge ----------
          if [ "$RUNNER_OS" = "macOS" ] && [ "${{ matrix.arch }}" = "universal" ]; then
            cargo build --manifest-path cidrscan_php/Cargo.toml --release --target=aarch64-apple-darwin
            lipo -create \
              target/x86_64-apple-darwin/release/libcidrscan_php.dylib \
              target/aarch64-apple-darwin/release/libcidrscan_php.dylib \
              -output "$OUTDIR/cidrscan_php.${{ matrix.libext }}"
          fi 

          # ---------- pick the first-built library for non-macOS or copy merged one ----------
          SRC="target/${{ matrix.target }}/release"
          # find the first file that actually exists, regardless of extension/prefix
          found=""
          for cand in \
                "$SRC/libcidrscan_php.${{ matrix.libext }}" \
                "$SRC/cidrscan_php.${{ matrix.libext }}"  \
                "$SRC/libcidrscan_php.dylib"; do
            if [ -f "$cand" ]; then
              found="$cand"; break
            fi
          done
          if [ "$RUNNER_OS" != "macOS" ] || [ "${{ matrix.arch }}" != "universal" ]; then
            if [ -z "$found" ]; then
              echo "::error file=$SRC::no built cidrscan_php library found"; exit 1
            fi
            cp "$found" "$OUTDIR/cidrscan_php.${{ matrix.libext }}"
          fi

          cp cidrscan_php.phpstub "$OUTDIR/"

      - name: Zip PHP deliverable
        shell: bash
        run: |
          set -euo pipefail
          OUTDIR="packages/php-${{ matrix.version }}_${{ matrix.osname }}_${{ matrix.arch }}_${{ matrix.phpts }}"
          ZIP="cidrscan_php_${{ matrix.version }}_${{ matrix.osname }}_${{ matrix.arch }}_${{ matrix.phpts }}.zip"

          cd "$OUTDIR"
          zip -rq "../../$ZIP" .
          cd - >/dev/null

          echo "::group::Contents of $ZIP"
          unzip -l "$ZIP"
          echo "::endgroup::"

      - uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: cidrscan_php_*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload PHP extension zips as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: php-ext-${{ matrix.version }}-${{ matrix.osname }}-${{ matrix.arch }}-${{ matrix.phpts }}
          path: cidrscan_php_${{ matrix.version }}_${{ matrix.osname }}_${{ matrix.arch }}_${{ matrix.phpts }}.zip