name: Build and Release Libraries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable toolchain
        run: rustup default stable
      - name: Run all tests
        run: cargo test
  
  build-linux-windows:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1. Build native targets
      - name: Install cross
        run: cargo install cross
      - name: Install cbindgen
        run: cargo install cbindgen
      - name: Install Rust stable toolchain
        run: rustup default stable
      - name: Add Rust targets
        run: rustup target add x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu x86_64-pc-windows-gnu
      - name: Install MinGW dependencies
        run: sudo apt-get update && sudo apt-get install -y gcc-mingw-w64

      - name: Build Linux and Windows binaries
        run: |
          mkdir -p packages
          for pair in \
            "x86_64-unknown-linux-gnu:linux-x86_64" \
            "aarch64-unknown-linux-gnu:linux-aarch64" \
            "x86_64-pc-windows-gnu:windows-x86_64"; do

            IFS=":" read -r target name <<< "$pair"
            cross build --release --target $target
            src="target/$target/release"

            # generate C header
            cbindgen --config cbindgen.toml --crate cidrscan --output $src/cidrscan.h

            # copy into per-arch folder
            mkdir -p packages/$name
            cp $src/cidrscan.h                            packages/$name/
            case "$target" in
              *windows-gnu)
                cp $src/cidrscan.dll     packages/$name/ || true
                cp $src/libcidrscan.a     packages/$name/ || true
                cp $src/cidrscan.lib      packages/$name/ || true
                cp $src/cidrscan.dll.lib  packages/$name/ || true
                ;;
              *)
                cp $src/libcidrscan.so    packages/$name/ || true
                cp $src/libcidrscan.a      packages/$name/ || true
                ;;
            esac

          done

      # 2. Generate PHP FFI wrappers with FFIMe
      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@v2 
        with:
          php-version: '8.4'

      - name: Install FFIMe generator
        run: |
          cd binding_skeletons/php
          composer require ircmaxell/ffime --no-interaction --dev

      - name: Generate PHP wrappers
        run: |
          cd binding_skeletons/php
          # point generate.php at the Linux build
          LIB_PATH="$(pwd)/../../target/x86_64-unknown-linux-gnu/release/libcidrscan.so"
          HDR_PATH="$(pwd)/../../target/x86_64-unknown-linux-gnu/release/cidrscan.h"
          php generate.php \
            --lib "$LIB_PATH" \
            --header "$HDR_PATH" \
            --output php

      # 3. Package PHP wrappers
      - name: Zip PHP wrappers
        run: |
          cd binding_skeletons/php
          zip -r ../../../citadel-ffi-php.zip \
            php/ composer.json README.md LICENSE

      # 4. Zip native libraries per-arch
      - name: Create native zips
        run: |
          for name in linux-x86_64 linux-aarch64 windows-x86_64; do
            (cd packages/$name && zip -r ../../$name.zip .)
          done

      # 5. Upload all zips
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: '*.zip'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: Build macOS
    needs: test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable toolchain
        run: rustup default stable
      - name: Add Rust targets
        run: rustup target add x86_64-apple-darwin aarch64-apple-darwin
      - name: Install cbindgen
        run: brew install cbindgen      
      - name: Build and package macOS targets
        run: |
          mkdir -p packages
          for pair in \
            "x86_64-apple-darwin:macos-x86_64" \
            "aarch64-apple-darwin:macos-aarch64"; do

            IFS=":" read -r target name <<< "$pair"
            cargo build --release --target $target
            src="target/$target/release"

            cbindgen --config cbindgen.toml --crate cidrscan --output $src/cidrscan.h
            mkdir -p packages/$name
            cp $src/cidrscan.h            packages/$name/
            cp $src/libcidrscan.dylib     packages/$name/ || true
            cp $src/libcidrscan.a         packages/$name/ || true
          done

      - name: Create macOS zips
        run: |
          for name in macos-x86_64 macos-aarch64; do
            (cd packages/$name && zip -r ../../$name.zip .)
          done

      - name: Upload macOS assets
        uses: softprops/action-gh-release@v2
        with:
          files: '*.zip'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
