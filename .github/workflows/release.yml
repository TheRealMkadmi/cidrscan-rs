name: Build and Release Libraries

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - .github/workflows/release.yml
  push:
    branches:
      - main

    
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cbindgen
        run: cargo install cbindgen


      - name: Build shared library
        run: cargo build --release --target ${{ matrix.target }}

      - name: Generate C header
        run: cbindgen --config cbindgen.toml --crate cidrscan --output cidrscan.h

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir artifacts
          cp cidrscan.h artifacts/
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/cidrscan.dll artifacts/ || true
            cp target/${{ matrix.target }}/release/cidrscan.lib artifacts/ || true
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            cp target/${{ matrix.target }}/release/libcidrscan.dylib artifacts/ || true
          else
            cp target/${{ matrix.target }}/release/libcidrscan.so artifacts/ || true
          fi

      - name: Zip artifacts
        run: |
          cd artifacts
          zip ../${{ matrix.artifact_name }}.zip *

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.artifact_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}