name: Build and Release Libraries

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
    paths-ignore: [.github/workflows/release.yml]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-linux-windows:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install cross
        run: cargo install cross
      - name: Install cbindgen
        run: cargo install cbindgen

      - name: Install Rust stable toolchain
        run: rustup default stable
      - name: Add Rust targets
        run: rustup target add x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu x86_64-pc-windows-gnu
      - name: Install MinGW dependencies
        run: sudo apt-get update && sudo apt-get install -y gcc-mingw-w64
      - name: Build and package cross targets
        run: |
          mkdir packages
          for pair in "x86_64-unknown-linux-gnu:linux-x86_64" "aarch64-unknown-linux-gnu:linux-aarch64" "x86_64-pc-windows-gnu:windows-x86_64"; do
            IFS=":" read -r target name <<< "$pair"            cross build --release --target $target
            # Determine source directory: Use target/release for native Linux build, target/$target/release otherwise
            if [ "$target" = "x86_64-unknown-linux-gnu" ]; then
              src_dir="target/release"
            else
              src_dir="target/$target/release"
            fi
            
            # Check what files were built
            echo "Files built in $src_dir:"
            ls -la $src_dir | grep -E 'libcidrscan|cidrscan.dll'
            # Generate C header with cbindgen
            cbindgen --config cbindgen.toml --crate cidrscan --output $src_dir/cidrscan.h
            mkdir -p packages/$name
            # Copy header file
            cp $src_dir/cidrscan.h packages/$name/            # Copy binary files based on target
            case "$target" in
              *windows-gnu)
                # For MinGW builds
                cp $src_dir/cidrscan.dll packages/$name/ || echo "No .dll file found"
                cp $src_dir/libcidrscan.a packages/$name/ || echo "No static .a file found"
                ;;
              *)
                # For Linux builds
                cp $src_dir/libcidrscan.so packages/$name/ || echo "No .so file found"
                cp $src_dir/libcidrscan.a packages/$name/ || echo "No static .a file found"
                ;;
            esac
            cd packages/$name
            zip -r ../../$name.zip *
            cd ../../
          done
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: '*.zip'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: Build macOS
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable toolchain
        run: rustup default stable
      - name: Add Rust targets
        run: rustup target add x86_64-apple-darwin aarch64-apple-darwin
      - name: Install cbindgen
        run: brew install cbindgen
      - name: Build and package macOS targets
        run: |
          rustup target add x86_64-apple-darwin aarch64-apple-darwin
          mkdir packages
          host_triple=$(rustc -vV | sed -n 's/host: //p') # Get the host triple
          for pair in "x86_64-apple-darwin:macos-x86_64" "aarch64-apple-darwin:macos-aarch64"; do
            IFS=":" read -r target name <<< "$pair"            cargo build --release --target $target
            # Determine source directory: Use target/release if target matches host, target/$target/release otherwise
            if [ "$target" = "$host_triple" ]; then
              src_dir="target/release"
            else
              src_dir="target/$target/release"
            fi
            
            # Check what library files were built
            echo "Library files built in $src_dir:"
            ls -la $src_dir | grep libcidrscan
            
            echo "Source directory: $src_dir"
            echo "Available files in $src_dir:"
            ls -la $src_dir
            
            # Generate C header with cbindgen
            cbindgen --config cbindgen.toml --crate cidrscan --output $src_dir/cidrscan.h
            mkdir -p packages/$name
            
            # Copy header file
            cp $src_dir/cidrscan.h packages/$name/
              # Copy all library files that might exist with different extensions
            # macOS primarily uses .dylib for dynamic libraries
            cp $src_dir/libcidrscan.dylib packages/$name/ || echo "No .dylib file found"
            # Also include static library
            cp $src_dir/libcidrscan.a packages/$name/ || echo "No .a file found"
            
            # Check what was actually copied
            echo "Files in packages/$name directory:"
            ls -la packages/$name
            
            cd packages/$name
            zip -r ../../$name.zip *
            cd ../../
          done
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: '*.zip'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
