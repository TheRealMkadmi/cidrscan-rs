# .github/workflows/build-and-release.yml
name: Build and Release Libraries

on:
  push:
    tags: ['v*']
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

###############################################################################
# 1. Test suite
###############################################################################
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - run: cargo test --workspace

###############################################################################
# 2. Native C-ABI libraries (Linux & Windows)
###############################################################################
  build-libs:
    needs: test
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4

      - name: Install cross-rs
        run: cargo install cross --locked

      - name: Add required Rust targets
        run: |
          rustup target add x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu x86_64-pc-windows-gnu

      - name: Build & package every native target
        shell: bash
        run: |
          set -euo pipefail
          declare -A MAP=(
            [x86_64-unknown-linux-gnu]=linux-x86_64
            [aarch64-unknown-linux-gnu]=linux-aarch64
            [x86_64-pc-windows-gnu]=windows-x86_64
          )
          mkdir -p packages
          for TARGET in "${!MAP[@]}"; do
            NAME=${MAP[$TARGET]}
            cross build --release --manifest-path cidrscan_core/Cargo.toml --target "$TARGET"
            SRC=target/$TARGET/release
            INC=cidrscan_core/include

            mkdir -p "packages/$NAME"
            cp "$INC/cidrscan.h" "packages/$NAME/"
            # Copy shared + static libraries
            for PAT in "libcidrscan*.so" "libcidrscan*.a" "cidrscan*.dll" "cidrscan*.lib"; do
              cp "$SRC/$PAT" "packages/$NAME/" 2>/dev/null || true
            done

            (cd "packages/$NAME" && zip -rq "../../$NAME.zip" .)
          done

      - uses: softprops/action-gh-release@v2
        with:
          files: |
            linux-*.zip
            windows-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

###############################################################################
# 3. PHP extensions (+ stubs) for PHP 8.3 & 8.4 across OS/arch/TS combos
###############################################################################
  build-php:
    needs: test
    strategy:
      matrix:
        include:
          # Linux NTS (x86_64 + aarch64)
          - { os: ubuntu-latest, osname: linux, arch: x86_64, target: x86_64-unknown-linux-gnu, libext: so, phpts: nts, version: '8.3' }
          - { os: ubuntu-latest, osname: linux, arch: aarch64, target: aarch64-unknown-linux-gnu, libext: so, phpts: nts, version: '8.3' }
          - { os: ubuntu-latest, osname: linux, arch: x86_64, target: x86_64-unknown-linux-gnu, libext: so, phpts: nts, version: '8.4' }
          - { os: ubuntu-latest, osname: linux, arch: aarch64, target: aarch64-unknown-linux-gnu, libext: so, phpts: nts, version: '8.4' }

          # macOS NTS (x86_64 + aarch64)
          - { os: macos-latest, osname: macos, arch: x86_64, target: x86_64-apple-darwin, libext: so, phpts: nts, version: '8.3' }
          - { os: macos-latest, osname: macos, arch: aarch64, target: aarch64-apple-darwin, libext: so, phpts: nts, version: '8.3' }
          - { os: macos-latest, osname: macos, arch: x86_64, target: x86_64-apple-darwin, libext: so, phpts: nts, version: '8.4' }
          - { os: macos-latest, osname: macos, arch: aarch64, target: aarch64-apple-darwin, libext: so, phpts: nts, version: '8.4' }

          # Windows NTS & TS (x86_64 only)
          - { os: windows-latest, osname: windows, arch: x86_64, target: x86_64-pc-windows-msvc, libext: dll, phpts: nts, version: '8.3' }
          - { os: windows-latest, osname: windows, arch: x86_64, target: x86_64-pc-windows-msvc, libext: dll, phpts: ts,  version: '8.3' }
          - { os: windows-latest, osname: windows, arch: x86_64, target: x86_64-pc-windows-msvc, libext: dll, phpts: nts, version: '8.4' }
          - { os: windows-latest, osname: windows, arch: x86_64, target: x86_64-pc-windows-msvc, libext: dll, phpts: ts,  version: '8.4' }
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install aarch64 cross-compiler
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install macOS cross-compilers
        if: runner.os == 'macOS'
        run: brew install llvm cctools

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.version }}
        env:
          phpts: ${{ matrix.phpts }}

      - if: runner.os == 'Windows'
        id: php_sdk
        uses: php/setup-php-sdk@v0.10
        with:
          version: ${{ matrix.version }}
          arch: x64
          ts: ${{ matrix.phpts }}

      - if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          toolset: ${{ steps.php_sdk.outputs.toolset }}

      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - run: cargo install cargo-php --locked

      - name: Build extension & generate stubs
        shell: bash
        run: |
          set -euo pipefail
          OUTDIR="packages/php-${{ matrix.version }}_${{ matrix.osname }}_${{ matrix.arch }}_${{ matrix.phpts }}"
          mkdir -p "$OUTDIR"

          cargo build --manifest-path cidrscan_php/Cargo.toml --release --target="${{ matrix.target }}"

          SRC="target/${{ matrix.target }}/release"
          cp "$SRC"/*cidrscan_php.${{ matrix.libext }} "$OUTDIR/"
          cargo php stubs --manifest-path cidrscan_php/Cargo.toml -o "$OUTDIR/cidrscan_php.phpstub"

      - name: Zip PHP deliverable
        shell: bash
        run: |
          ZIP="cidrscan_php_${{ matrix.version }}_${{ matrix.osname }}_${{ matrix.arch }}_${{ matrix.phpts }}.zip"
          (cd packages && zip -rq "../$ZIP" "php-${{ matrix.version }}_${{ matrix.osname }}_${{ matrix.arch }}_${{ matrix.phpts }}")

      - uses: softprops/action-gh-release@v2
        with:
          files: cidrscan_php_*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

###############################################################################
# 4. Native libs for macOS (fat/universal)
###############################################################################
  build-macos-libs:
    needs: test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          targets: |
            x86_64-apple-darwin
            aarch64-apple-darwin
      - name: List target directory before copying header
        shell: bash
        run: |
          echo "Listing target directory (recursive):"
          find target
          echo "Listing cidrscan_core/include directory:"
          ls -l cidrscan_core/include || true
          echo "Listing target/include directory:"
          ls -l target/include || true
          echo "Listing target/universal/release directory:"
          ls -l target/universal/release || true
      - name: Build & package (fat)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p target/universal/release packages
          for ARCH in x86_64-apple-darwin aarch64-apple-darwin; do
            cargo build --release --manifest-path cidrscan_core/Cargo.toml --target "$ARCH"
          done

          # Combine into a single universal dylib
          lipo -create \
            target/x86_64-apple-darwin/release/libcidrscan_core.dylib \
            target/aarch64-apple-darwin/release/libcidrscan_core.dylib \
            -output target/universal/release/libcidrscan_core.dylib

          NAME=macos-universal
          mkdir -p "packages/$NAME"
          cp target/universal/release/libcidrscan_core.dylib "packages/$NAME/"
          cp cidrscan_core/include/cidrscan.h             "packages/$NAME/"
          (cd "packages/$NAME" && zip -rq "../../$NAME.zip" .)
      - uses: softprops/action-gh-release@v2
        with:
          files: macos-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

###############################################################################
# 5. Merge macOS PHP extensions into universal .so (for each PHP version)
###############################################################################
  merge-php-macos-universal:
    needs: build-php
    runs-on: macos-latest
    strategy:
      matrix:
        version: [ '8.3', '8.4' ]
    steps:
      - uses: actions/checkout@v4
      - name: Download PHP extension artifacts
        uses: actions/download-artifact@v4
        with:
          name: |
            cidrscan_php_${{ matrix.version }}_macos_x86_64_nts.zip
            cidrscan_php_${{ matrix.version }}_macos_aarch64_nts.zip

      - name: Unzip artifacts
        run: |
          unzip cidrscan_php_${{ matrix.version }}_macos_x86_64_nts.zip -d x86_64
          unzip cidrscan_php_${{ matrix.version }}_macos_aarch64_nts.zip -d aarch64

      - name: Merge PHP extensions into universal binary
        run: |
          mkdir -p universal
          lipo -create \
            x86_64/cidrscan_php.so \
            aarch64/cidrscan_php.so \
            -output universal/cidrscan_php.so

      - name: Zip universal PHP extension
        run: |
          cd universal
          zip ../cidrscan_php_${{ matrix.version }}_macos_universal_nts.zip cidrscan_php.so

      - uses: softprops/action-gh-release@v2
        with:
          files: cidrscan_php_${{ matrix.version }}_macos_universal_nts.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
